import streamlit as st
import numpy as np
import matplotlib.pyplot as plt

# Constante dos gases ideais
R = 8.314  # J/mol¬∑K

# Fun√ß√µes da distribui√ß√£o de Maxwell-Boltzmann
def fator_pre_exp(v, M, T):
    return 4 * np.pi * (M / (2 * np.pi * R * T)) ** (3 / 2) * v ** 2

def fator_exp(v, M, T):
    return np.exp(-M * v ** 2 / (2 * R * T))

def F_MB(v, M, T):
    return fator_pre_exp(v, M, T) * fator_exp(v, M, T)

# Vetor de velocidades
v = np.linspace(0, 4000, 500)

# Sidebar de navega√ß√£o
st.sidebar.title("Navega√ß√£o")
pagina = st.sidebar.radio("Escolha a visualiza√ß√£o:", [
    "0. Introdu√ß√£o",
    "1. Um g√°s, uma temperatura",
    "2. Um g√°s, duas temperaturas",
    "3. Dois gases, uma temperatura"
])

# P√°gina 0 - Introdu√ß√£o
if pagina == "0. Introdu√ß√£o":
    st.title("Distribui√ß√£o de Maxwell-Boltzmann")
    st.markdown("### Bem-vindo ao Simulador de Maxwell-Boltzmann üß™")

    st.markdown(r'''
A **Distribui√ß√£o de Maxwell-Boltzmann** descreve como as velocidades das mol√©culas de um g√°s ideal se distribuem em fun√ß√£o da temperatura. Ela foi proposta por **James Clerk Maxwell** e aprimorada por **Ludwig Boltzmann**, sendo um dos pilares da **termodin√¢mica estat√≠stica**.

Essa distribui√ß√£o ajuda a entender:
- Como o **aumento de temperatura** afeta a velocidade das mol√©culas
- Por que **mol√©culas mais leves** tendem a se mover mais r√°pido
- A raz√£o pela qual certos **gases escapam da atmosfera de planetas**

A equa√ß√£o usada neste simulador √©:

$$
F(v) = 4\pi \left( \frac{M}{2\pi RT} \right)^{3/2} v^2 \cdot e^{-\\frac{Mv^2}{2RT}}
$$

Onde:

- \(F(v)\): densidade de probabilidade de velocidade \(v\)
- \(M\): massa molar (kg/mol)
- \(T\): temperatura (K)
- \(R\): constante dos gases (8{,}314 J/mol¬∑K)




---

### üîç O que voc√™ pode explorar neste app:

- **P√°gina 1:** Um g√°s em uma √∫nica temperatura
- **P√°gina 2:** Um g√°s em **duas temperaturas diferentes**
- **P√°gina 3:** **Dois gases diferentes** em uma mesma temperatura

Cada p√°gina mostra:
- **Fator pr√©-exponencial** √ó velocidade
- **Fator exponencial** √ó velocidade
- **Distribui√ß√£o F(v)** √ó velocidade
''')

# P√°gina 1
elif pagina == "1. Um g√°s, uma temperatura":
    st.title("P√°gina 1: Um g√°s, uma temperatura")

    massa_molar = st.number_input("Massa molar (g/mol)", value=44.0, step=0.1)
    temperatura = st.number_input("Temperatura (K)", value=288.0, step=1.0)
    M = massa_molar / 1000

    f_pre = fator_pre_exp(v, M, temperatura)
    f_exp = fator_exp(v, M, temperatura)
    f_MB = F_MB(v, M, temperatura)

    fig1, ax1 = plt.subplots()
    ax1.plot(v, f_pre, label="Pr√©-exponencial")
    ax1.set_title("Fator Pr√©-Exponencial √ó Velocidade")
    ax1.set_xlabel("Velocidade (m/s)")
    ax1.set_ylabel("Valor")
    ax1.grid(True)
    st.pyplot(fig1)

    fig2, ax2 = plt.subplots()
    ax2.plot(v, f_exp, color='orange', label="Exponencial")
    ax2.set_title("Fator Exponencial √ó Velocidade")
    ax2.set_xlabel("Velocidade (m/s)")
    ax2.set_ylabel("Valor")
    ax2.grid(True)
    st.pyplot(fig2)

    fig3, ax3 = plt.subplots()
    ax3.plot(v, f_MB, color='green', label="F(v)")
    ax3.set_title("Distribui√ß√£o de Maxwell-Boltzmann")
    ax3.set_xlabel("Velocidade (m/s)")
    ax3.set_ylabel("F(v)")
    ax3.grid(True)
    st.pyplot(fig3)

# P√°gina 2
elif pagina == "2. Um g√°s, duas temperaturas":
    st.title("P√°gina 2: Um g√°s, duas temperaturas")

    massa_molar = st.number_input("Massa molar (g/mol)", value=44.0, step=0.1)
    T1 = st.number_input("Temperatura 1 (K)", value=288.0, step=1.0)
    T2 = st.number_input("Temperatura 2 (K)", value=740.0, step=1.0)
    M = massa_molar / 1000

    f_pre1 = fator_pre_exp(v, M, T1)
    f_exp1 = fator_exp(v, M, T1)
    f_MB1 = F_MB(v, M, T1)

    f_pre2 = fator_pre_exp(v, M, T2)
    f_exp2 = fator_exp(v, M, T2)
    f_MB2 = F_MB(v, M, T2)

    fig1, ax1 = plt.subplots()
    ax1.plot(v, f_pre1, label=f"Pr√©-exp. T={T1}K", color="blue")
    ax1.plot(v, f_pre2, label=f"Pr√©-exp. T={T2}K", color="red")
    ax1.set_title("Fator Pr√©-Exponencial √ó Velocidade")
    ax1.set_xlabel("Velocidade (m/s)")
    ax1.set_ylabel("Valor")
    ax1.legend()
    ax1.grid(True)
    st.pyplot(fig1)

    fig2, ax2 = plt.subplots()
    ax2.plot(v, f_exp1, label=f"Exp. T={T1}K", color="blue")
    ax2.plot(v, f_exp2, label=f"Exp. T={T2}K", color="red")
    ax2.set_title("Fator Exponencial √ó Velocidade")
    ax2.set_xlabel("Velocidade (m/s)")
    ax2.set_ylabel("Valor")
    ax2.legend()
    ax2.grid(True)
    st.pyplot(fig2)

    fig3, ax3 = plt.subplots()
    ax3.plot(v, f_MB1, label=f"F(v) T={T1}K", color="blue")
    ax3.plot(v, f_MB2, label=f"F(v) T={T2}K", color="red")
    ax3.set_title("Distribui√ß√£o de Maxwell-Boltzmann")
    ax3.set_xlabel("Velocidade (m/s)")
    ax3.set_ylabel("F(v)")
    ax3.legend()
    ax3.grid(True)
    st.pyplot(fig3)

# P√°gina 3
elif pagina == "3. Dois gases, uma temperatura":
    st.title("P√°gina 3: Dois gases, uma temperatura")

    massa_molar_1 = st.number_input("Massa molar do g√°s 1 (g/mol)", value=44.0, step=0.1)
    massa_molar_2 = st.number_input("Massa molar do g√°s 2 (g/mol)", value=2.0, step=0.1)
    temperatura = st.number_input("Temperatura (K)", value=288.0, step=1.0)

    M1 = massa_molar_1 / 1000
    M2 = massa_molar_2 / 1000

    f_pre1 = fator_pre_exp(v, M1, temperatura)
    f_exp1 = fator_exp(v, M1, temperatura)
    f_MB1 = F_MB(v, M1, temperatura)

    f_pre2 = fator_pre_exp(v, M2, temperatura)
    f_exp2 = fator_exp(v, M2, temperatura)
    f_MB2 = F_MB(v, M2, temperatura)

    fig1, ax1 = plt.subplots()
    ax1.plot(v, f_pre1, label=f"Pr√©-exp. {massa_molar_1} g/mol", color="purple")
    ax1.plot(v, f_pre2, label=f"Pr√©-exp. {massa_molar_2} g/mol", color="orange")
    ax1.set_title("Fator Pr√©-Exponencial √ó Velocidade")
    ax1.set_xlabel("Velocidade (m/s)")
    ax1.set_ylabel("Valor")
    ax1.legend()
    ax1.grid(True)
    st.pyplot(fig1)

    fig2, ax2 = plt.subplots()
    ax2.plot(v, f_exp1, label=f"Exp. {massa_molar_1} g/mol", color="purple")
    ax2.plot(v, f_exp2, label=f"Exp. {massa_molar_2} g/mol", color="orange")
    ax2.set_title("Fator Exponencial √ó Velocidade")
    ax2.set_xlabel("Velocidade (m/s)")
    ax2.set_ylabel("Valor")
    ax2.legend()
    ax2.grid(True)
    st.pyplot(fig2)

    fig3, ax3 = plt.subplots()
    ax3.plot(v, f_MB1, label=f"F(v) {massa_molar_1} g/mol", color="purple")
    ax3.plot(v, f_MB2, label=f"F(v) {massa_molar_2} g/mol", color="orange")
    ax3.set_title("Distribui√ß√£o de Maxwell-Boltzmann")
    ax3.set_xlabel("Velocidade (m/s)")
    ax3.set_ylabel("F(v)")
    ax3.legend()
    ax3.grid(True)
    st.pyplot(fig3)
